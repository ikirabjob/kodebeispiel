<?php

namespace App\Tests\Domain\Person\Repository;

use App\DataFixtures\PersonFixture;
use App\Domain\Person\Enums\LoginTypeEnum;
use App\Domain\Person\Exception\LoginNotFoundException;
use App\Domain\Person\Model\Login;
use App\Domain\Person\Repository\LoginRepositoryInterface;
use App\Domain\Person\ValueObject\Auth\Credentials;
use App\Domain\Person\ValueObject\Auth\HashedPassword;
use App\Domain\Person\ValueObject\Auth\UserIdentifier;
use App\Domain\Person\ValueObject\Email;
use App\Domain\Shared\Exception\NotFoundException;
use App\Infrastructure\Person\Repository\Doctrine\LoginRepository;
use Doctrine\ORM\NonUniqueResultException;
use Exception;
use Liip\TestFixturesBundle\Services\DatabaseToolCollection;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;
use Symfony\Component\Uid\UuidV4;

class LoginRepositoryInterfaceTest extends KernelTestCase
{
    /**
     * @var LoginRepository|null
     */
    private ?LoginRepository $repository;

    /**
     * @var object|null
     */
    private ?object $databaseTool;

    /**
     * @throws Exception
     */
    protected function setUp(): void
    {
        parent::setUp();
        /** @var LoginRepository repository */
        $this->repository = self::getContainer()->get(LoginRepositoryInterface::class);
        $this->databaseTool = static::getContainer()->get(DatabaseToolCollection::class)->get();
    }

    public function test_login_search(): void
    {
        $login = $this->repository->search(new UuidV4());
        self::assertNull($login);
    }

    //TODO: 'personId = :': Error: Class App\Domain\Person\Model\Login has no field or association named personId"

    /**
     * @throws NonUniqueResultException
     */
    public function test_search_by_person_id() : void
    {
        $this->expectException(LoginNotFoundException::class);
        $login = $this->repository->searchByPersonId((new UuidV4()));
        self::assertNull($login);
    }

    public function test_login_save() : void
    {
        $fixtures = $this->databaseTool->loadFixtures([
            PersonFixture::class
        ])->getReferenceRepository();

        $userIdentifier = UserIdentifier::create(
            'ikirabjob@gmail.com',
            LoginTypeEnum::LOGIN_TYPE_EMAIL->value
        );

        $login = Login::create(
            (new UuidV4()),
            new Credentials(
                $userIdentifier,
                HashedPassword::encode('aaaaaa')
            ),
            $fixtures->getReference('person')
        );

        $login = $this->repository->save($login);
        self::assertNull($login);
    }

    /**
     * @throws NonUniqueResultException
     */
    public function test_get_by_login_name() : void
    {
        $login = $this->repository->getByLoginName('ikirabjob@gmail.com');
        self::assertNotNull($login);
        self::assertEquals('ikirabjob@gmail.com', $login->getLoginName());
        self::assertInstanceOf(Login::class, $login);
    }

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        $this->repository = null;
        $this->databaseTool = null;
    }
}