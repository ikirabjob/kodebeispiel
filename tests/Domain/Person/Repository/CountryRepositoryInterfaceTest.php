<?php

namespace App\Tests\Domain\Person\Repository;

use App\DataFixtures\CountryFixture;
use App\Domain\Person\Exception\CountryNotFoundException;
use App\Domain\Person\Model\Country;
use App\Domain\Person\Repository\CountryRepositoryInterface;
use App\Domain\Shared\Criteria\Criteria;
use App\Infrastructure\Person\Repository\Doctrine\CountryRepository;
use Doctrine\ORM\ORMInvalidArgumentException;
use Exception;
use Liip\TestFixturesBundle\Services\DatabaseToolCollection;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;
use Symfony\Component\Uid\UuidV4;

class CountryRepositoryInterfaceTest extends KernelTestCase
{
    /**
     * @var object|null
     */
    private ?object $repository;

    /**
     * @var object|null
     */
    private ?object $databaseTool;

    /**
     * @throws Exception
     */
    protected function setUp(): void
    {
        parent::setUp();
        /** @var CountryRepository repository */
        $this->repository = self::getContainer()->get(CountryRepositoryInterface::class);
        $this->databaseTool = static::getContainer()->get(DatabaseToolCollection::class)->get();
    }

    public function test_country_search() : void
    {
        $country = $this->repository->search(new UuidV4());
        self::assertNull($country);
    }

    public function test_country_search_by_legacyId() : void
    {
        $countryId = 123;
        $country = $this->repository->searchByLegacyId($countryId);
        self::assertNull($country);
    }

    public function test_country_save() : void
    {
        $country = new Country(
            new UuidV4(),
            'test',
            'test',
            'test'
        );

        $country = $this->repository->save($country);
        self::assertNull($country);
    }

    public function test_country_delete() : void
    {
        $this->expectException(CountryNotFoundException::class);
        $this->expectException(ORMInvalidArgumentException::class);
        $country = $this->repository->delete(new UuidV4());
        self::assertNull($country);
    }

    public function test_country_search_by_criteria() : void
    {
        $fixtures = $this->databaseTool->loadFixtures([
            CountryFixture::class
        ])->getReferenceRepository();

        $countries = $this->repository->searchByCriteria(new Criteria([]));

        $result = [];
        foreach ($countries as $key => $country) {
            $result[$key] = $country;
        }

        self::assertInstanceOf(Country::class, $country);
        self::assertEquals($fixtures->getReference('country')->getCountryId(), $country->getCountryId());
    }

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        $this->repository = null;
        unset($this->databaseTool);
    }
}